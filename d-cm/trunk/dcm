#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Sun Nov 29 18:42:47 2009

import wx, os, datetime, stat
from ftplib import FTP
try:
	import MySQLdb
except:
	print "Attention: If you want to use MySQL you will have to install the MySQLdb module view Read-me for more information"

# begin wxGlade: extracode
# end wxGlade

class ChangeDirPanel(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: ChangeDirPanel.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_1 = wx.Panel(self, -1)
        self.text_ctrl_16 = wx.TextCtrl(self.panel_1, -1, "")
        self.button_5 = wx.Button(self.panel_1, -1, "C&hange")
        self.button_9 = wx.Button(self.panel_1, wx.ID_CANCEL, "")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.changedir, self.button_5)
        self.Bind(wx.EVT_BUTTON, self.cancel, self.button_9)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: ChangeDirPanel.__set_properties
        self.SetTitle("Change Directory")
        self.text_ctrl_16.SetMinSize((400, 27))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: ChangeDirPanel.__do_layout
        sizer_17 = wx.BoxSizer(wx.VERTICAL)
        sizer_18 = wx.BoxSizer(wx.VERTICAL)
        sizer_19 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_18.Add(self.text_ctrl_16, 0, wx.ADJUST_MINSIZE, 0)
        sizer_19.Add(self.button_5, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        sizer_19.Add(self.button_9, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        sizer_18.Add(sizer_19, 0, wx.EXPAND, 0)
        self.panel_1.SetSizer(sizer_18)
        sizer_17.Add(self.panel_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_17)
        sizer_17.Fit(self)
        self.Layout()
        # end wxGlade

    def changedir(self, event): # wxGlade: ChangeDirPanel.<event_handler>
	myframe = MyFrame(None, -1, "")
	myframe.SetStatusText("Hello")
        myframe.filedir = self.text_ctrl_16.GetValue()
	myframe.file_show_dir()

    def cancel(self, event): # wxGlade: ChangeDirPanel.<event_handler>
        self.Close()

# end of class ChangeDirPanel


class DedFrame(wx.MDIChildFrame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: DedFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.MDIChildFrame.__init__(self, *args, **kwds)
        self.text_ctrl_11 = wx.TextCtrl(self, -1, "")

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: DedFrame.__set_properties
        self.SetTitle("frame_1")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: DedFrame.__do_layout
        sizer_13 = wx.BoxSizer(wx.VERTICAL)
        sizer_13.Add(self.text_ctrl_11, 1, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
        self.SetSizer(sizer_13)
        sizer_13.Fit(self)
        self.Layout()
        # end wxGlade

# end of class DedFrame


class SendDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: SendDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.label_3 = wx.StaticText(self, -1, "To which directory\n should the file be uploaded?", style=wx.ALIGN_CENTRE)
        self.text_ctrl_10 = wx.TextCtrl(self, -1, "/")
        self.button_11 = wx.Button(self, -1, "Send!")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.send_ftp, self.button_11)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: SendDialog.__set_properties
        self.SetTitle("Send Options")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: SendDialog.__do_layout
        sizer_5 = wx.BoxSizer(wx.VERTICAL)
        sizer_12 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_12.Add(self.label_3, 1, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        sizer_12.Add(self.text_ctrl_10, 1, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        sizer_5.Add(sizer_12, 1, wx.EXPAND, 0)
        sizer_5.Add(self.button_11, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        self.SetSizer(sizer_5)
        sizer_5.Fit(self)
        self.Layout()
        # end wxGlade

    def file(self,dcmdir,dir,file):
	self.dcmdir = dcmdir
	self.curdir = dir
	self.lastfile = file

    def send_ftp(self, event): # wxGlade: SendDialog.<event_handler>
        if(self.text_ctrl_10.GetValue()):
		myframe = MyFrame(None, -1, "")
		lastdir = self.text_ctrl_10.GetValue()
		if(lastdir.startswith("/")):
			lastdir = lastdir.partition("/")[2]
		optionframe = OptionFrame(None, -1, "")
		optionframe.config_set("SLASTDIR",lastdir)
		optionframe.config_set("SLASTFILE",self.lastfile)
		ftpp = self.dcmdir + 'ftp.ded'
		fl = self.curdir + "/" + self.lastfile
		try:
			f = open(fl, 'r')
			label = ""
			for line in f:
				label += line
			f.close()
			g = open(ftpp,'w')
			g.write(label)
			g.close()
		except:
			myframe.log("FTP:SEND:error")
		myframe.ftp_upload()
		self.Destroy()

# end of class SendDialog


class OptionFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: OptionFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.notebook_2 = wx.Notebook(self, -1, style=0)
        self.notebook_2_pane_5 = wx.Panel(self.notebook_2, -1)
        self.notebook_2_pane_3 = wx.Panel(self.notebook_2, -1)
        self.notebook_2_pane_2 = wx.Panel(self.notebook_2, -1)
        self.notebook_2_pane_1 = wx.Panel(self.notebook_2, -1)
        self.sizer_15_staticbox = wx.StaticBox(self.notebook_2_pane_5, -1, "FTP")
        self.sizer_7_staticbox = wx.StaticBox(self.notebook_2_pane_1, -1, "Startup")
        self.combo_box_1 = wx.ComboBox(self.notebook_2_pane_1, -1, choices=["File Manager", "MySql", "Deditor", "FTP"], style=wx.CB_DROPDOWN)
        self.label_12 = wx.StaticText(self.notebook_2_pane_2, -1, "The Default Folder:", style=wx.ALIGN_CENTRE)
        self.text_ctrl_7 = wx.TextCtrl(self.notebook_2_pane_2, -1, "")
        self.button_8 = wx.Button(self.notebook_2_pane_2, -1, "Apply")
        self.checkbox_10 = wx.CheckBox(self.notebook_2_pane_3, -1, "Start MySQL by default")
        self.label_7 = wx.StaticText(self.notebook_2_pane_3, -1, "Server name")
        self.text_ctrl_3 = wx.TextCtrl(self.notebook_2_pane_3, -1, "")
        self.label_8 = wx.StaticText(self.notebook_2_pane_3, -1, "Username")
        self.text_ctrl_4 = wx.TextCtrl(self.notebook_2_pane_3, -1, "")
        self.label_9 = wx.StaticText(self.notebook_2_pane_3, -1, "Password")
        self.text_ctrl_5 = wx.TextCtrl(self.notebook_2_pane_3, -1, "", style=wx.TE_PASSWORD)
        self.label_10 = wx.StaticText(self.notebook_2_pane_3, -1, "Database")
        self.text_ctrl_6 = wx.TextCtrl(self.notebook_2_pane_3, -1, "")
        self.label_11 = wx.StaticText(self.notebook_2_pane_3, -1, "You have to fill in a server name, username\npassword and database\nto connect with MySQL")
        self.button_6 = wx.Button(self.notebook_2_pane_3, -1, "Apply")
        self.notebook_2_pane_4 = wx.Panel(self.notebook_2, -1)
        self.label_4 = wx.StaticText(self.notebook_2_pane_5, -1, "Server")
        self.text_ctrl_13 = wx.TextCtrl(self.notebook_2_pane_5, -1, "")
        self.label_5 = wx.StaticText(self.notebook_2_pane_5, -1, "User")
        self.text_ctrl_14 = wx.TextCtrl(self.notebook_2_pane_5, -1, "")
        self.label_6 = wx.StaticText(self.notebook_2_pane_5, -1, "Pass")
        self.text_ctrl_15 = wx.TextCtrl(self.notebook_2_pane_5, -1, "", style=wx.TE_PASSWORD)
        self.button_13 = wx.Button(self.notebook_2_pane_5, -1, "Apply")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.fdeffolder, self.button_8)
        self.Bind(wx.EVT_CHECKBOX, self.mysql_default, self.checkbox_10)
        self.Bind(wx.EVT_BUTTON, self.mysql_database, self.button_6)
        self.Bind(wx.EVT_BUTTON, self.ftp_config, self.button_13)
        # end wxGlade

	myframe = MyFrame(None, -1, "")
	value = myframe.config_get("GSTARTUP")
	if(value == "MySQL"):
		self.combo_box_1.SetValue("MySql")
	elif(value == "Deditor"):
		self.combo_box_1.SetValue("Deditor")
	elif(value == "FTP"):
		self.combo_box_1.SetValue("FTP")
	else:
		self.combo_box_1.SetValue("File Manager")
	value = myframe.config_get("MSTART")
	if(value == "YES"):
		self.checkbox_10.SetValue(1)
	else:
		self.checkbox_10.SetValue(0)
	value = myframe.config_get("MSERVER")
	self.text_ctrl_3.SetValue(value)
	value = myframe.config_get("MUSER")
	self.text_ctrl_4.SetValue(value)
	value = myframe.config_get("MPASS")
	self.text_ctrl_5.SetValue(value)
	value = myframe.config_get("MDATA")
	self.text_ctrl_6.SetValue(value)
	value = myframe.config_get("SSERVER")
	self.text_ctrl_13.SetValue(value)
	value = myframe.config_get("SUSER")
	self.text_ctrl_14.SetValue(value)
	value = myframe.config_get("SPASS")
	self.text_ctrl_15.SetValue(value)

    def __set_properties(self):
        # begin wxGlade: OptionFrame.__set_properties
        self.SetTitle("Options")
        self.SetSize((650, 633))
        self.combo_box_1.SetSelection(0)
        self.label_12.SetMinSize((125, 17))
        self.text_ctrl_7.SetMinSize((200, 27))
        self.text_ctrl_3.SetMinSize((200, 27))
        self.text_ctrl_4.SetMinSize((200, 27))
        self.text_ctrl_5.SetMinSize((200, 27))
        self.text_ctrl_6.SetMinSize((200, 27))
        self.label_11.SetFont(wx.Font(10, wx.DEFAULT, wx.ITALIC, wx.NORMAL, 0, ""))
        self.text_ctrl_13.SetMinSize((300, 27))
        self.text_ctrl_14.SetMinSize((300, 27))
        self.text_ctrl_15.SetMinSize((300, 27))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: OptionFrame.__do_layout
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_15 = wx.StaticBoxSizer(self.sizer_15_staticbox, wx.VERTICAL)
        grid_sizer_2 = wx.GridSizer(4, 2, 0, 0)
        sizer_8 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_3 = wx.GridSizer(5, 2, 0, 0)
        sizer_6 = wx.BoxSizer(wx.VERTICAL)
        sizer_9 = wx.GridSizer(1, 2, 0, 0)
        sizer_7 = wx.StaticBoxSizer(self.sizer_7_staticbox, wx.VERTICAL)
        sizer_7.Add(self.combo_box_1, 0, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
        self.notebook_2_pane_1.SetSizer(sizer_7)
        sizer_9.Add(self.label_12, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_9.Add(self.text_ctrl_7, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_6.Add(sizer_9, 0, wx.EXPAND, 0)
        sizer_6.Add(self.button_8, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        self.notebook_2_pane_2.SetSizer(sizer_6)
        sizer_8.Add(self.checkbox_10, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_3.Add(self.label_7, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_3.Add(self.text_ctrl_3, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_3.Add(self.label_8, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_3.Add(self.text_ctrl_4, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_3.Add(self.label_9, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_3.Add(self.text_ctrl_5, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_3.Add(self.label_10, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_3.Add(self.text_ctrl_6, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_3.Add(self.label_11, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_3.Add(self.button_6, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        sizer_8.Add(grid_sizer_3, 1, wx.EXPAND, 0)
        self.notebook_2_pane_3.SetSizer(sizer_8)
        grid_sizer_2.Add(self.label_4, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_2.Add(self.text_ctrl_13, 0, wx.ALIGN_BOTTOM|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_2.Add(self.label_5, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_2.Add(self.text_ctrl_14, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_2.Add(self.label_6, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_2.Add(self.text_ctrl_15, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_2.Add(self.button_13, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        sizer_15.Add(grid_sizer_2, 1, wx.EXPAND|wx.SHAPED, 0)
        self.notebook_2_pane_5.SetSizer(sizer_15)
        self.notebook_2.AddPage(self.notebook_2_pane_1, "General")
        self.notebook_2.AddPage(self.notebook_2_pane_2, "File Manager")
        self.notebook_2.AddPage(self.notebook_2_pane_3, "MySQL")
        self.notebook_2.AddPage(self.notebook_2_pane_4, "Deditor")
        self.notebook_2.AddPage(self.notebook_2_pane_5, "Send")
        sizer_3.Add(self.notebook_2, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_3)
        self.Layout()
        self.SetSize((650, 633))
        # end wxGlade

    def config_set(self,name,new):
	myframe = MyFrame(None, -1, "")
	self.config = myframe.dcmdir + "config.ded"
	last = myframe.config_get(name)
	last = name + "|" + last
	new = name + "|" + new
	try:
		s = open(self.config, 'r').read()
	except:
		myframe.log("error: could not open" + self.config + " error generated in config_set")
	s = s.replace(last, new)
	f = open(self.config, 'w')
	f.write(s)
	f.close()

    def startup(self, event): # wxGlade: OptionFrame.<event_handler>
        if(self.combo_box_1.GetValue() == 0):
		selection = "FM"
	elif(self.combo_box_1.GetValue() == 1):
		selection = "MySQL"
	elif(self.combo_box_1.GetValue() == 2):
		selection = "Deditor"
	else:
		selection = "FTP"
	self.config_set("GSTARTUP",selection)

    def mysql_default(self, event): # wxGlade: OptionFrame.<event_handler>
	myframe = MyFrame(None, -1, "")
	server = myframe.config_get("MSERVER")
	muser = myframe.config_get("MUSER")
	mpass = myframe.config_get("MPASS")
	mdata = myframe.config_get("MDATA")
	if((server != 'None') and (muser != 'None') and (mpass != 'None') and (mdata != 'None')):
	        if(self.checkbox_10.GetValue() == 0):
			selection = "NO"
		else:
			selection = "YES"
		self.config_set("MSTART",selection)
	else:
		self.checkbox_10.SetValue(0)
		myframe.SetStatusText("Please fill in a servername/username/password or databasename")

    def mysql_database(self, event): # wxGlade: OptionFrame.<event_handler>
        if(self.text_ctrl_3.GetValue() and self.text_ctrl_4.GetValue() and self.text_ctrl_5.GetValue() and self.text_ctrl_6.GetValue()):
		self.config_set("MSERVER",self.text_ctrl_3.GetValue())
		self.config_set("MUSER",self.text_ctrl_4.GetValue())
		self.config_set("MPASS",self.text_ctrl_5.GetValue())
		self.config_set("MDATA",self.text_ctrl_6.GetValue())

    def fdeffolder(self, event): # wxGlade: OptionFrame.<event_handler>
	if(self.text_ctrl_7.GetValue()):
		self.config_set("FDEF",self.text_ctrl_7.GetValue())

    def ftp_config(self, event): # wxGlade: OptionFrame.<event_handler>
        if(self.text_ctrl_13.GetValue() and self.text_ctrl_14.GetValue() and self.text_ctrl_15.GetValue()):
		self.config_set("SSERVER",self.text_ctrl_13.GetValue())
		self.config_set("SUSER",self.text_ctrl_14.GetValue())
		self.config_set("SPASS",self.text_ctrl_15.GetValue())

# end of class OptionFrame


class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.notebook_1 = wx.Notebook(self, -1, style=0)
        self.notebook_1_pane_4 = wx.Panel(self.notebook_1, -1)
        self.notebook_1_pane_3 = wx.Panel(self.notebook_1, 3)
        self.notebook_1_pane_2 = wx.Panel(self.notebook_1, 2)
        self.notebook_1_pane_1 = wx.Panel(self.notebook_1, 1)
        self.notebook_3 = wx.Notebook(self.notebook_1_pane_1, -1, style=wx.NB_RIGHT)
        self.notebook_3_pane_2 = wx.Panel(self.notebook_3, -1)
        self.notebook_3_pane_1 = wx.Panel(self.notebook_3, -1)
        
        # Menu Bar
        self.menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(5, "Options", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(12, "Extlib Manager", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(11, "Open FIle", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(2, "Quit", "", wx.ITEM_NORMAL)
        self.menubar.Append(wxglade_tmp_menu, "DCM")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(1, "Change Dir", "", wx.ITEM_NORMAL)
        self.menubar.Append(wxglade_tmp_menu, "File Manager")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(3, "Start", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(4, "Stop", "", wx.ITEM_NORMAL)
        self.menubar.Append(wxglade_tmp_menu, "MySql")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(6, "start", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(7, "stop", "", wx.ITEM_NORMAL)
        self.menubar.Append(wxglade_tmp_menu, "FTP")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(8, "Save", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(9, "Upload (FTP)", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(10, "2nd Deditor", "", wx.ITEM_NORMAL)
        self.menubar.Append(wxglade_tmp_menu, "Deditor")
        self.SetMenuBar(self.menubar)
        # Menu Bar end
        self.statusbar = self.CreateStatusBar(0, 0)
        self.list_box_1 = wx.ListBox(self.notebook_1_pane_1, -1, choices=[])
        self.label_1 = wx.StaticText(self.notebook_3_pane_1, -1, "Name:")
        self.label_2 = wx.StaticText(self.notebook_3_pane_1, -1, "")
        self.label_15 = wx.StaticText(self.notebook_3_pane_1, -1, "Size:")
        self.label_16 = wx.StaticText(self.notebook_3_pane_1, -1, "")
        self.button_1 = wx.Button(self.notebook_3_pane_1, -1, "DOPEN")
        self.button_2 = wx.Button(self.notebook_3_pane_1, -1, "Edit")
        self.text_ctrl_1 = wx.TextCtrl(self.notebook_3_pane_2, -1, "")
        self.button_3 = wx.Button(self.notebook_3_pane_2, -1, "Rename")
        self.text_ctrl_12 = wx.TextCtrl(self.notebook_3_pane_2, -1, "")
        self.button_4 = wx.Button(self.notebook_3_pane_2, -1, "Chmod")
        self.radio_box_1 = wx.RadioBox(self.notebook_3_pane_2, -1, "chmod input", choices=["octal", "symbolic"], majorDimension=0, style=wx.RA_SPECIFY_ROWS)
        self.label_17 = wx.StaticText(self.notebook_3_pane_2, -1, "example:\nOctal        (0)755\nSymbolic  rwxr-xr-x")
        self.list_box_3 = wx.ListBox(self.notebook_1_pane_2, -1, choices=[])
        self.text_ctrl_2 = wx.TextCtrl(self.notebook_1_pane_2, -1, "")
        self.button_7 = wx.Button(self.notebook_1_pane_2, -1, "Run!")
        self.text_ctrl_9 = wx.TextCtrl(self.notebook_1_pane_2, -1, "Query Output Will Appear here.", style=wx.TE_MULTILINE|wx.TE_READONLY)
        self.text_ctrl_8 = wx.TextCtrl(self.notebook_1_pane_3, -1, "", style=wx.TE_MULTILINE)
        self.list_box_2 = wx.ListBox(self.notebook_1_pane_4, -1, choices=[])
        self.label_13 = wx.StaticText(self.notebook_1_pane_4, -1, "Name:")
        self.label_14 = wx.StaticText(self.notebook_1_pane_4, -1, "")
        self.button_10 = wx.Button(self.notebook_1_pane_4, -1, "Download and Open with Deditor")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.options, id=5)
        self.Bind(wx.EVT_MENU, self.extlibman, id=12)
        self.Bind(wx.EVT_MENU, self.open_file, id=11)
        self.Bind(wx.EVT_MENU, self.quit, id=2)
        self.Bind(wx.EVT_MENU, self.change_dir, id=1)
        self.Bind(wx.EVT_MENU, self.start_mysql, id=3)
        self.Bind(wx.EVT_MENU, self.stop_mysql, id=4)
        self.Bind(wx.EVT_MENU, self.ftp_start, id=6)
        self.Bind(wx.EVT_MENU, self.ftp_stop, id=7)
        self.Bind(wx.EVT_MENU, self.dedsave, id=8)
        self.Bind(wx.EVT_MENU, self.fptup, id=9)
        self.Bind(wx.EVT_MENU, self.secded, id=10)
        self.Bind(wx.EVT_LISTBOX_DCLICK, self.listbox, self.list_box_1)
        self.Bind(wx.EVT_BUTTON, self.dopen, self.button_1)
        self.Bind(wx.EVT_BUTTON, self.edit, self.button_2)
        self.Bind(wx.EVT_BUTTON, self.rename, self.button_3)
        self.Bind(wx.EVT_BUTTON, self.chmod, self.button_4)
        self.Bind(wx.EVT_RADIOBOX, self.init_chmod, self.radio_box_1)
        self.Bind(wx.EVT_BUTTON, self.do_query, self.button_7)
        self.Bind(wx.EVT_LISTBOX_DCLICK, self.ftp_list, self.list_box_2)
        self.Bind(wx.EVT_BUTTON, self.fdown, self.button_10)
        # end wxGlade

	self.initialize()

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("DCM")
        _icon = wx.EmptyIcon()
        _icon.CopyFromBitmap(wx.Bitmap("/home/darragh/Afbeeldingen/mysql.png", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.SetSize((1279, 691))
        self.statusbar.SetStatusWidths([])
        # statusbar fields
        statusbar_fields = []
        for i in range(len(statusbar_fields)):
            self.statusbar.SetStatusText(statusbar_fields[i], i)
        self.list_box_1.SetMinSize((350, 605))
        self.label_1.SetBackgroundColour(wx.Colour(216, 216, 191))
        self.label_1.SetForegroundColour(wx.Colour(255, 0, 0))
        self.label_2.SetBackgroundColour(wx.Colour(216, 216, 191))
        self.label_2.SetForegroundColour(wx.Colour(255, 0, 0))
        self.label_15.SetBackgroundColour(wx.Colour(216, 216, 191))
        self.label_15.SetForegroundColour(wx.Colour(255, 0, 0))
        self.label_16.SetBackgroundColour(wx.Colour(216, 216, 191))
        self.label_16.SetForegroundColour(wx.Colour(255, 0, 0))
        self.text_ctrl_1.SetMinSize((400, 27))
        self.text_ctrl_12.SetMinSize((400, 27))
        self.radio_box_1.SetSelection(0)
        self.notebook_1_pane_1.SetBackgroundColour(wx.Colour(216, 216, 191))
        self.list_box_3.SetMinSize((350, 63))
        self.text_ctrl_2.SetMinSize((250, 27))
        self.notebook_1_pane_2.SetBackgroundColour(wx.Colour(216, 216, 191))
        self.text_ctrl_8.SetBackgroundColour(wx.Colour(216, 216, 191))
        self.list_box_2.SetMinSize((350, 328))
        self.label_13.SetBackgroundColour(wx.Colour(216, 216, 191))
        self.label_13.SetForegroundColour(wx.Colour(255, 0, 0))
        self.label_14.SetBackgroundColour(wx.Colour(216, 216, 191))
        self.label_14.SetForegroundColour(wx.Colour(255, 0, 0))
        self.notebook_1_pane_4.SetBackgroundColour(wx.Colour(216, 216, 191))
        self.notebook_1.SetBackgroundColour(wx.Colour(255, 0, 0))
        self.notebook_1.SetForegroundColour(wx.Colour(255, 255, 255))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_10 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_4 = wx.GridSizer(2, 2, 0, 0)
        sizer_11 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_5 = wx.GridSizer(2, 2, 0, 0)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_16 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_6 = wx.GridSizer(3, 2, 0, 0)
        sizer_14 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_1 = wx.GridSizer(5, 2, 0, 0)
        sizer_2.Add(self.list_box_1, 0, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.label_1, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.label_2, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE|wx.FIXED_MINSIZE, 0)
        grid_sizer_1.Add(self.label_15, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE|wx.FIXED_MINSIZE, 0)
        grid_sizer_1.Add(self.label_16, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE|wx.FIXED_MINSIZE, 0)
        grid_sizer_1.Add(self.button_1, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.button_2, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        sizer_14.Add(grid_sizer_1, 0, wx.EXPAND, 0)
        self.notebook_3_pane_1.SetSizer(sizer_14)
        grid_sizer_6.Add(self.text_ctrl_1, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_6.Add(self.button_3, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_6.Add(self.text_ctrl_12, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_6.Add(self.button_4, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_6.Add(self.radio_box_1, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_6.Add(self.label_17, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        sizer_16.Add(grid_sizer_6, 0, wx.EXPAND, 0)
        self.notebook_3_pane_2.SetSizer(sizer_16)
        self.notebook_3.AddPage(self.notebook_3_pane_1, "Basic")
        self.notebook_3.AddPage(self.notebook_3_pane_2, "Advanced")
        sizer_2.Add(self.notebook_3, 1, wx.EXPAND, 0)
        self.notebook_1_pane_1.SetSizer(sizer_2)
        sizer_4.Add(self.list_box_3, 0, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
        grid_sizer_5.Add(self.text_ctrl_2, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_5.Add(self.button_7, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_5.Add(self.text_ctrl_9, 0, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
        sizer_4.Add(grid_sizer_5, 1, wx.EXPAND, 0)
        self.notebook_1_pane_2.SetSizer(sizer_4)
        sizer_11.Add(self.text_ctrl_8, 1, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
        self.notebook_1_pane_3.SetSizer(sizer_11)
        sizer_10.Add(self.list_box_2, 0, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
        grid_sizer_4.Add(self.label_13, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_4.Add(self.label_14, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_4.Add(self.button_10, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        sizer_10.Add(grid_sizer_4, 1, wx.EXPAND, 0)
        self.notebook_1_pane_4.SetSizer(sizer_10)
        self.notebook_1.AddPage(self.notebook_1_pane_1, "File Manager")
        self.notebook_1.AddPage(self.notebook_1_pane_2, "MySql")
        self.notebook_1.AddPage(self.notebook_1_pane_3, "Deditor")
        self.notebook_1.AddPage(self.notebook_1_pane_4, "Ftp")
        sizer_1.Add(self.notebook_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        self.SetSize((1279, 691))
        # end wxGlade

    def initialize(self):
	#DCM FILES AND DIRECTORIES CHECK#
	self.dcmdir = os.path.dirname(__file__) + "/"
	if(os.path.exists(self.dcmdir + "dcmlog.ded") != True):
		print "ATTENTION: LOG FILE MISSING: DCMLOG.DED"
	if(os.path.exists(self.dcmdir + "config.ded") != True):
		self.log("ATTENTION: CONFIGURATION FILE MISSING: CONFIG.DED")
	#Welcome Message
	self.SetStatusText("Welcome to DCM!")
	self.log("DCM Started from " + self.dcmdir)
	self.mysql_status = False
	#@Dopen
	value = self.config_get("@IMPORT:DOPEN")
	if(value == "YES"):
		self.dopen = True
	else:
		self.dopen = False
	#Notebook Check
	value = self.config_get("GSTARTUP")
	if(value == "MySQL"):
		self.notebook_1.SetSelection(1)
	elif(value == "Deditor"):
		self.notebook_1.SetSelection(2)
	elif(value == "Ftp"):
		self.notebook_1.SetSelection(3)
	else:
		self.notebook_1.SetSelection(0)
	#Mysql Start By default
	value = self.config_get("MSTART")
	if(value == "YES"):
		self.mysql_start()
	#DEXTLIB Check
	if(self.dopen):
		if(self.extlib("@DCM:VERSION","YES") >= self.config_get("@DCM:VERSION")):
			self.dopenvalid = True
		else:
			self.dopenvalid = False
			self.SetStatusText("ATTENTION: DOPEN IS NOT THE RIGHT VERSION")
	#DFTP Check
	value = self.config_get("SSERVER")
	#FDEF Check
	self.filedir = self.config_get("FDEF")
	self.file_show_dir()

    def config_get(self,name):
	self.config = self.dcmdir + "config.ded"
	try:
		f = open(self.config, 'r')
	except:
		self.log("error: could not open" + self.config + " error generated in config_get")
	for line in f:
		if name.strip() == line.strip().split("|")[0]:
			 strip = line.strip().split("|")[1]
	return strip
	f.close()

    def open_file(self, event): # wxGlade: MyFrame.<event_handler>
	self.SetStatusText("this currently serves an other purpose...")
	self.sctframe = ShortCut(MyFrame(self), -1, "")
	self.sctframe.Show()

    def quit(self, event): # wxGlade: MyFrame.<event_handler>
	self.Close()

    def file_show_dir(self):
	self.list_box_1.Set([])
	self.list_box_1.Append("[Back]")
	listdir = os.listdir(self.filedir)
	listdir.sort()
	for i in listdir:
		if(os.path.isdir(self.filedir + "/" + i)):
			self.list_box_1.Append("[F] " + i)
		else:
			self.list_box_1.Append(i)
	self.SetStatusText("Directory List Updated")
	self.log("Directory List Updated")

    def listbox(self, event): # wxGlade: MyFrame.<event_handler>
        if event.GetString().startswith("[F]"):
		ev=event.GetString().strip().split(" ")[1::]
		ev=' '.join(ev)
		self.filedir += "/" + ev
		self.file_show_dir()
	elif "[Back]" in event.GetString():
		if(self.filedir.rpartition("/")[0] == ''):
			self.filedir = "/"
		else:
			self.filedir = self.filedir.rpartition("/")[0]
		self.file_show_dir()
	else:
		self.abspath = self.filedir + "/" + event.GetString()
		self.label_2.SetLabel(event.GetString())
		self.curfile = event.GetString()
		self.label_16.SetLabel(self.size(self.abspath))
		self.text_ctrl_1.SetValue(event.GetString())
		self.chmod_init()

    def size(self, fl):
	bytes = os.path.getsize(self.abspath)
	word=['b','kb','mb','gb','tb']
	wrd=0
	while bytes > 1000 and wrd <= 4:
		wrd += 1
		bytes /= 1000
	return str(bytes) + " " + str(word[wrd])

    def rename(self, event): # wxGlade: MyFrame.<event_handler>
        if(self.text_ctrl_1.GetValue() != ''):
		os.rename(self.curfile,self.text_ctrl_1.GetValue())
		self.label_2.SetLabel(self.text_ctrl_1.GetValue())
		self.SetStatusText("FM: Renamed " + self.curfile + " to " + self.text_ctrl_1.GetValue())
		self.log("FM: Renamed " + self.curfile + " to " + self.text_ctrl_1.GetValue())
		self.curfile = self.text_ctrl_1.GetValue()
		self.file_show_dir()
	else:
		self.SetStatusText("FM: Was not able to rename file")
		self.log("error: not able to rename file")

    def send(self, event): # wxGlade: MyFrame.<event_handler>
	if(self.label_2.GetLabel()):
	        senddialog = SendDialog(None, -1, "")
		senddialog.file(self.dcmdir,self.filedir,self.label_2.GetLabel())
		senddialog.Show()

    def edit(self, event): # wxGlade: MyFrame.<event_handler>
	fl = self.filedir + "/" + self.label_2.GetLabel()
        f = open(fl, 'r')
	txt = ""
	for line in f.readlines():
		txt = txt + line
	f.close()
	self.notebook_1.SetSelection(2)
	self.dedfrom = "fm"
	self.dedfl = fl
	self.text_ctrl_8.SetValue(txt)

    def dcrypt(self, event): # wxGlade: MyFrame.<event_handler>
        self.SetStatusText("This Function is not yet implemented.")

    def decrypt(self, event): # wxGlade: MyFrame.<event_handler>
        self.SetStatusText("This Function is not yet implemented.")

    def start_mysql(self, event): # wxGlade: MyFrame.<event_handler>
	self.mysql_start()

    def mysql_start(self):
	localhost = self.config_get("MSERVER")
	usr = self.config_get("MUSER")
	password = self.config_get("MPASS")
	data = self.config_get("MDATA")
	try:
	        self.db = MySQLdb.connect(localhost,usr,password,data)
		self.cursor = self.db.cursor()
		self.mysql_status = True
		self.mysql_table()
		self.log("MySql: Start")
        	self.SetStatusText("Mysql: Start")
	except:
		self.SetStatusText("Mysql: Not able to start")
		self.log("MySQL: Not able to start")

    def stop_mysql(self, event): # wxGlade: MyFrame.<event_handler>
        self.mysql_status = False
        self.SetStatusText("Mysql: Stop")
	self.log("MySql: Stop")
	self.db.close()

    def do_query(self, event): # wxGlade: MyFrame.<event_handler>
	if(self.mysql_status):
		self.qry = self.text_ctrl_2.GetValue()
		try:
	        	self.cursor.execute(self.qry)
			self.query = self.cursor.fetchall()
			label = ""
			for i in self.query:
				label += str(i) + "\n"
			self.text_ctrl_9.SetValue(label)
		        self.SetStatusText("Mysql: Query: " + self.qry)
			self.log("Mysql: Query: " + self.qry)
		except MySQLdb.Error, e:
		     label = "Error %d:\n%s" % (e.args[0], e.args[1])
		     self.text_ctrl_9.SetValue(label)
		     self.log("MySql: Error: " + label)
		     self.SetStatusText("Mysql: Error: Query")
	else:
	        self.SetStatusText("ATTENTION: Mysql not started!")

    def table_query(self, event): # wxGlade: MyFrame.<event_handler>
        if(self.mysql_status):
		self.qry = "SELECT * FROM " + event.GetString()
		try:
	        	self.cursor.execute(self.qry)
			self.query = self.cursor.fetchall()
			label = ""
			for i in self.query:
				label += str(i) + "\n"
			self.text_ctrl_9.SetValue(label)
		        self.SetStatusText("Mysql: Query: " + self.qry)
			self.log("Mysql: Query: " + self.qry)
		except MySQLdb.Error, e:
		     label = "Error %d:\n%s" % (e.args[0], e.args[1])
		     self.text_ctrl_9.SetValue(label)
		     self.log("MySql: Error: " + label)
		     self.SetStatusText("Mysql: Error: Query")
	else:
	        self.SetStatusText("ATTENTION: Mysql not started!")

    def mysql_table(self):
	self.list_box_3.Set([])
	try:
	        self.cursor.execute("SHOW TABLES;")
		self.query = self.cursor.fetchall()
	except:
		self.log("error")
	for i in self.query:
		i = str(i).strip().split("'")[1]
		self.list_box_3.Append(str(i))

    def options(self, event): # wxGlade: MyFrame.<event_handler>
	self.opframe = OptionFrame(MyFrame(self), -1, "")
        self.opframe.Show()

    def dopen(self, event): # wxGlade: MyFrame.<event_handler>
        dopn = self.extlib(self.label_2.GetLabel(),"NO")
	os.system(dopn + " \"" + self.filedir + "/" + self.label_2.GetLabel() + "\" &")

    def extlib(self,fl,at):
	if(self.dopen):
		self.extlibloc = self.dcmdir + "DOPEN/extlib.ded"
		goon = True
		if(at=="YES"):
			flext = fl
		else:
			try:
				num = len(fl.strip().split(".")) - 1
				if num != 0:
					flext = fl.strip().split(".")[num]
				else:
					fl = self.filedir + "/" + self.label_2.GetLabel()
				        f = open(fl, 'r')
					txt = ""
					for line in f.readlines():
						if line.startswith("#!/"):
							flext = line
					f.close()
					print flext
					try:
						num = len(fl.strip().split("/")) - 1
						flext = flext.split().strip("/")[num]
					except:
						#try:
						#	flext = flext.strip().split(" ")[1]
						#except:
						#	self.SetStatusText("This file does not have an extension and does not contain a header")
						goon = False
					
			except:
				goon = False
		if(goon):
			try:
				f = open(self.extlibloc, 'r')
			except:
				self.log("extlibloc not right")
			try:
				for line in f:
					if flext.strip() == line.strip().split("|")[0]:
						strip = line.strip().split("|")[1]
				return strip
			except:
				self.SetStatusText("Unknown Extension")
		f.close()
	else:
		self.SetStatusText("DOPEN NOT IMPORTED!")

    def log(self,string):
	fl = self.dcmdir + "dcmlog.ded"
	now = datetime.datetime.now()
	nu = now.strftime("%Y-%m-%d %H:%M")
	log = "\n" + nu + " " + string
	try:
		f = open(fl, 'a')
		f.write(log)
		f.close()
	except:
		self.SetStatusText("LOG FILE MISSING")

    def start_ftp(self):
	self.host = self.config_get("SSERVER")
	self.usr = self.config_get("SUSER")
	self.pswd = self.config_get("SPASS")
	try:
		self.ftp = FTP(self.host)
		self.ftp.login(self.usr,self.pswd)
		self.SetStatusText("FTP: logged in")
		self.log("FTP: logged in")
	except:
		self.SetStatusText("FTP: Not able to login")
		self.log("FTP: Not able to login")
	self.ftpdir = self.ftp.pwd()
	self.ftpfile = ""
	self.ftp_show_dir()

    def ftp_show_dir(self):
	self.list_box_2.Set([])
	self.list_box_2.Append("[Back]")
	listdir = self.ftp.nlst(self.ftpdir)
	for i in listdir:
    		try:
		        self.ftp.size(i)
        		self.list_box_2.Append(i)
		except:
        		self.list_box_2.Append("[F]" + i)
	#self.SetStatusText("Directory List Updated")
	#self.log("Directory List Updated")

    def ftp_list(self, event): # wxGlade: MyFrame.<event_handler>
	if event.GetString().startswith("[F]"):
		self.ftpdir = "./" + event.GetString().strip().split("]")[1]
		self.ftp_show_dir()
	elif "[Back]" in event.GetString():
		if(self.ftpdir.rpartition("/")[0] == ''):
			self.ftpdir = '.'
		else:
			self.ftpdir = self.ftpdir.rpartition("/")[0]
		self.ftp_show_dir()
	else:
		self.label_14.SetLabel(event.GetString())
		self.ftpfile = event.GetString()

    def ftp_download(self,ftp):
	ftpdir = ftp.rpartition("/")[0]
	ftpfile = ftp.rpartition("/")[2]
	self.ftp.cwd('/' + ftpdir)
	retr = 'RETR ' + ftpfile
	ftpp = self.dcmdir + 'ftp.ded'
	self.ftp.retrbinary(retr, open(ftpp,'w').write)
	txt = ''
	f = open(ftpp, 'r')
	for line in f.readlines():
		txt = txt + line
	f.close()
	self.notebook_1.SetSelection(2)
	self.dedfrom = "ftp"
	self.text_ctrl_8.SetValue(txt)

    def ftp_upload(self):
	try:
		lastdir = self.config_get("SLASTDIR")
		lastfile = self.config_get("SLASTFILE")
		self.ftp.cwd('/' + lastdir)
		stor = 'STOR ' + lastfile
		fttp = self.dcmdir + 'ftp.ded'
		self.ftp.storbinary(stor, open(fttp))
	except:
		self.log("FTP:Upload:Error")
		self.SetStatusText("FTP:Upload:Error")

    def ftp_start(self, event): # wxGlade: MyFrame.<event_handler>
        self.start_ftp()

    def ftp_stop(self, event): # wxGlade: MyFrame.<event_handler>
        self.ftp.quit()

    def fdown(self, event): # wxGlade: MyFrame.<event_handler>
        self.ftp_download(self.label_14.GetLabel())

    def fptup(self, event): # wxGlade: MyFrame.<event_handler>
        self.ftp_upload()

    def dedsave(self, event): # wxGlade: MyFrame.<event_handler>
        if(self.dedfrom == 'ftp'):
		ftpp = self.dcmdir + 'ftp.ded'
		try:
			open(ftpp, 'w').write(self.text_ctrl_8.GetValue())
		except:
			self.log("error with deditor save ftp")
	elif(self.dedfrom == 'fm'):
		fl = self.dedfl
		try:
			g = open(fl,'w')
			g.write(self.text_ctrl_8.GetValue())
			g.close()
		except:
			self.log("error with deditor save fm")

    def change_dir(self, event): # wxGlade: MyFrame.<event_handler>
        self.chgedirframe = ChangeDirPanel(MyFrame(self), -1, "")
	self.chgedirframe.Show()

    def secded(self, event): # wxGlade: MyFrame.<event_handler>
        self.SetStatusText("Not implemented yet")

    def chmod(self, event): # wxGlade: MyFrame.<event_handler>
	mode=self.text_ctrl_12.GetValue()
	if(self.radio_box_1.GetSelection()==0):
		os.system("chmod "+mode+" "+self.abspath)
	else:
		chmod=""
		for i in mode:
			if i == "-":
				chmod+="0"
			else:
				chmod+="1"
		user=int(chmod[0:3],2)
		group=int(chmod[3:6],2)
		others=int(chmod[6::],2)
		chmod=str(user)+str(group)+str(others)
		os.system("chmod "+chmod+" "+self.abspath)

    def chmod_init(self):
	lvl=""
	if(self.radio_box_1.GetSelection()==0):
		lvl=oct(stat.S_IMODE(os.lstat(self.abspath)[stat.ST_MODE]))
	else:
		mode=stat.S_IMODE(os.lstat(self.abspath)[stat.ST_MODE])
	        for level in "USR", "GRP", "OTH":
        	    for perm in "R", "W", "X":
        	        if mode & getattr(stat,"S_I"+perm+level):
        	            lvl+=perm
			else:
			    lvl+="-"
	self.text_ctrl_12.SetValue(lvl)

    def init_chmod(self, event): # wxGlade: MyFrame.<event_handler>
        self.chmod_init()

    def extlibman(self, event): # wxGlade: MyFrame.<event_handler>
        os.system(self.dcmdir + "/DOPEN/extlibman &")

# end of class MyFrame


if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    dcm = MyFrame(None, -1, "")
    app.SetTopWindow(dcm)
    dcm.Show()
    app.MainLoop()
