#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Sun Nov 29 18:42:47 2009

import wx, os, datetime, stat
from ftplib import FTP

# begin wxGlade: extracode
# end wxGlade

class Infoo(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: Infoo.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.text_ctrl_3 = wx.TextCtrl(self, -1, "", style=wx.TE_MULTILINE|wx.TE_READONLY)
        self.button_6 = wx.Button(self, -1, "&Close")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.close, self.button_6)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: Infoo.__set_properties
        self.SetTitle("dialog_3")
        self.SetSize((400, 300))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: Infoo.__do_layout
        sizer_5 = wx.BoxSizer(wx.VERTICAL)
        sizer_5.Add(self.text_ctrl_3, 1, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
        sizer_5.Add(self.button_6, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        self.SetSizer(sizer_5)
        self.Layout()
        # end wxGlade

    def close(self, event): # wxGlade: Infoo.<event_handler>
        self.Close()

# end of class Infoo

class SaveAs(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: SaveAs.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.text_ctrl_2 = wx.TextCtrl(self, -1, "(absolute location of file)")
        self.button_4 = wx.Button(self, -1, "&Save")
        self.button_5 = wx.Button(self, -1, "&Cancel")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.save, self.button_4)
        self.Bind(wx.EVT_BUTTON, self.cancel, self.button_5)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: SaveAs.__set_properties
        self.SetTitle("Save As..")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: SaveAs.__do_layout
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3.Add(self.text_ctrl_2, 0, wx.EXPAND|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        sizer_4.Add(self.button_4, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        sizer_4.Add(self.button_5, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        sizer_3.Add(sizer_4, 0, wx.EXPAND, 0)
        self.SetSizer(sizer_3)
        sizer_3.Fit(self)
        self.Layout()
        # end wxGlade

    def save(self, event): # wxGlade: SaveAs.<event_handler>
        deditor.filepath = self.text_ctrl_2.GetValue()
        deditor.save_file("")
        self.Close()

    def cancel(self, event): # wxGlade: SaveAs.<event_handler>
        self.Close()

# end of class SaveAs


class StillText(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: StillText.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.label_1 = wx.StaticText(self, -1, "ATTENTION: THERE IS STILL A FILE OPENED!", style=wx.ALIGN_CENTRE)
        self.button_1 = wx.Button(self, -1, "Save")
        self.button_2 = wx.Button(self, -1, "Continue")
        self.button_3 = wx.Button(self, -1, "Cancel")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.save_file, self.button_1)
        self.Bind(wx.EVT_BUTTON, self.continu, self.button_2)
        self.Bind(wx.EVT_BUTTON, self.cancel, self.button_3)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: StillText.__set_properties
        self.SetTitle("ATTENTION!")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: StillText.__do_layout
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_2_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(self.label_1, 0, wx.EXPAND|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        sizer_2_copy.Add(self.button_1, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        sizer_2_copy.Add(self.button_2, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        sizer_2_copy.Add(self.button_3, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        sizer_2.Add(sizer_2_copy, 0, wx.EXPAND|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        self.SetSizer(sizer_2)
        sizer_2.Fit(self)
        self.Layout()
        # end wxGlade

    def save_file(self, event): # wxGlade: StillText.<event_handler>
        deditor.save_file("")
        deditor.st = "save"
        self.Close()

    def continu(self, event): # wxGlade: StillText.<event_handler>
        deditor.st = "continue"
        self.Close()

    def cancel(self, event): # wxGlade: StillText.<event_handler>
        deditor.st = "cancel"
        self.Close()

# end of class StillText


class DEDITOR(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: DEDITOR.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        
        # Menu Bar
        self.deditor_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(1, "&New", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(2, "&Open", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(3, "&Save", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(4, "Save &As", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(5, "&Quit", "", wx.ITEM_NORMAL)
        self.deditor_menubar.Append(wxglade_tmp_menu, "File")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(6, "Current &File", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(7, "&FTP", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(8, "Configuration", "", wx.ITEM_NORMAL)
        self.deditor_menubar.Append(wxglade_tmp_menu, "Options")
        self.SetMenuBar(self.deditor_menubar)
        # Menu Bar end
        self.deditor_statusbar = self.CreateStatusBar(1, 0)
        self.text_ctrl_1 = wx.TextCtrl(self, -1, "", style=wx.TE_MULTILINE|wx.HSCROLL)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.new_file, id=1)
        self.Bind(wx.EVT_MENU, self.open_file, id=2)
        self.Bind(wx.EVT_MENU, self.save_file, id=3)
        self.Bind(wx.EVT_MENU, self.saveas_file, id=4)
        self.Bind(wx.EVT_MENU, self.quit, id=5)
        self.Bind(wx.EVT_MENU, self.curfile, id=6)
        self.Bind(wx.EVT_MENU, self.ftp, id=7)
        self.Bind(wx.EVT_MENU, self.options, id=8)
        # end wxGlade
        
        self.initialize()

    def __set_properties(self):
        # begin wxGlade: DEDITOR.__set_properties
        self.SetTitle("frame_1")
        self.SetSize((500, 600))
        self.deditor_statusbar.SetStatusWidths([-1])
        # statusbar fields
        deditor_statusbar_fields = ["deditor_statusbar"]
        for i in range(len(deditor_statusbar_fields)):
            self.deditor_statusbar.SetStatusText(deditor_statusbar_fields[i], i)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: DEDITOR.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(self.text_ctrl_1, 1, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        self.SetSize((500, 600))
        # end wxGlade
        
    def initialize(self):
        self.deddir = os.path.dirname(__file__) + "/"
        self.filedir = self.deddir
        self.filepath = "None"

    def still_text(self):
        if(self.text_ctrl_1.GetValue() != ""):
            stilltext = StillText(None, -1, "")
            stilltext.ShowModal()
        else:
            self.st = "continue"

    def new_file(self, event): # wxGlade: DEDITOR.<event_handler>
        self.still_text()
        if(self.st != "cancel"):
            self.text_ctrl_1.SetValue("")
            self.filepath = "None"

    def open_file(self, event): # wxGlade: DEDITOR.<event_handler>
        self.still_text()
        if(self.st=="cancel"):
            pass
        else:
            dlg = wx.FileDialog(self, message="Open File", defaultDir=self.filedir, defaultFile="", style=wx.OPEN)
            if dlg.ShowModal() == wx.ID_OK:   
                self.filepath = dlg.GetPath()
                self.editfl(self.filepath)
            dlg.Destroy()

    def editfl(self, fl):
        f = open(fl, 'r')
        txt = ""
        for line in f.readlines():
            txt = txt + line
        f.close()
        self.text_ctrl_1.SetValue(txt)

    def save_file(self, event): # wxGlade: DEDITOR.<event_handler>
        if self.filepath == "None":
            self.SetStatusText("Use Save As Instead..")
        else:
            try:
                txt = self.text_ctrl_1.GetValue()
                f = open(self.filepath, 'w')
                f.write(txt)
                f.close()
                svd = 'Saved: ' + os.path.basename(self.filepath)
                self.SetStatusText(svd)
            except:
                self.SetStatusText("Deditor was not able to save your file..")

    def saveas_file(self, event): # wxGlade: DEDITOR.<event_handler>
        svasfl = SaveAs(None, -1, "")
        svasfl.ShowModal()

    def quit(self, event): # wxGlade: DEDITOR.<event_handler>
        self.Destroy()

    def curfile(self, event): # wxGlade: DEDITOR.<event_handler>
        curfileinfo = "Type: " + str(self.extlib(self.filepath, "NO", "flext"))
        curfileinfo+="\nDOPEN: " + str(self.extlib(self.filepath, "NO", "split"))
        size = os.path.getsize(self.filepath)
        curfileinfo +="\nSize: " + str(size) + "bytes"
        lastmod = os.path.getmtime(self.filepath)
        curfileinfo += "\nLast Modified: " + str(lastmod) + " seconds ago"
        lastacc = os.path.getatime(self.filepath)
        curfileinfo += "\nLast Accesed: " + str(lastacc) + " seconds ago"
        inf = Infoo(None, -1, "")
        inf.text_ctrl_3.SetValue(curfileinfo)
        inf.ShowModal()

    def extlib(self,fl,at,rt):
        self.extlibloc = self.deddir + "DOPEN/extlib.ded"
        goon = True
        if(at=="YES"):
            flext = fl
        else:
            try:
                num = len(fl.strip().split(".")) - 1
                if num != 0:
                    flext = fl.strip().split(".")[num]
                else:
                    fl = self.filepath
                    f = open(fl, 'r')
                    txt = ""
                    for line in f.readlines():
                        if line.startswith("#!/"):
                            flext = line
                    f.close()
                    try:
                        num = len(fl.strip().split("/")) - 1
                        flext = flext.split().strip("/")[num]
                    except:
                        #try:
                        #flext = flext.strip().split(" ")[1]
                        #except:
                        #self.SetStatusText("This file does not have an extension and does not contain a header")
                        goon = False
            except:
                goon = False
        if(goon):
            try:
                f = open(self.extlibloc, 'r')
            except:
                self.SetStatusText("extlibloc not right")
            try:
                for line in f:
                    if flext.strip() == line.strip().split("|")[0]:
                        strip = line.strip().split("|")[1]
                if(rt=="strip"):
                    return strip
                else:
                    return flext
            except:
                self.SetStatusText("Unknown Extension")
        f.close()

    def ftp(self, event): # wxGlade: DEDITOR.<event_handler>
        print "Event handler `ftp' not implemented!"
        event.Skip()

    def options(self, event): # wxGlade: DEDITOR.<event_handler>
        print "Event handler `options' not implemented!"
        event.Skip()

# end of class DEDITOR


if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    deditor = DEDITOR(None, -1, "")
    app.SetTopWindow(deditor)
    deditor.Show()
    app.MainLoop()
